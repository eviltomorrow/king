// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: finder.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Finder_ReportDaily_FullMethodName        = "/brain.Finder/ReportDaily"
	Finder_ReportWeek_FullMethodName         = "/brain.Finder/ReportWeek"
	Finder_FindPossibleChance_FullMethodName = "/brain.Finder/FindPossibleChance"
)

// FinderClient is the client API for Finder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FinderClient interface {
	ReportDaily(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*StatsInfo, error)
	ReportWeek(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*StatsInfo, error)
	FindPossibleChance(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Chances, error)
}

type finderClient struct {
	cc grpc.ClientConnInterface
}

func NewFinderClient(cc grpc.ClientConnInterface) FinderClient {
	return &finderClient{cc}
}

func (c *finderClient) ReportDaily(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*StatsInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatsInfo)
	err := c.cc.Invoke(ctx, Finder_ReportDaily_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finderClient) ReportWeek(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*StatsInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatsInfo)
	err := c.cc.Invoke(ctx, Finder_ReportWeek_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finderClient) FindPossibleChance(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Chances, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Chances)
	err := c.cc.Invoke(ctx, Finder_FindPossibleChance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FinderServer is the server API for Finder service.
// All implementations must embed UnimplementedFinderServer
// for forward compatibility.
type FinderServer interface {
	ReportDaily(context.Context, *wrapperspb.StringValue) (*StatsInfo, error)
	ReportWeek(context.Context, *wrapperspb.StringValue) (*StatsInfo, error)
	FindPossibleChance(context.Context, *wrapperspb.StringValue) (*Chances, error)
	mustEmbedUnimplementedFinderServer()
}

// UnimplementedFinderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFinderServer struct{}

func (UnimplementedFinderServer) ReportDaily(context.Context, *wrapperspb.StringValue) (*StatsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportDaily not implemented")
}
func (UnimplementedFinderServer) ReportWeek(context.Context, *wrapperspb.StringValue) (*StatsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportWeek not implemented")
}
func (UnimplementedFinderServer) FindPossibleChance(context.Context, *wrapperspb.StringValue) (*Chances, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPossibleChance not implemented")
}
func (UnimplementedFinderServer) mustEmbedUnimplementedFinderServer() {}
func (UnimplementedFinderServer) testEmbeddedByValue()                {}

// UnsafeFinderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FinderServer will
// result in compilation errors.
type UnsafeFinderServer interface {
	mustEmbedUnimplementedFinderServer()
}

func RegisterFinderServer(s grpc.ServiceRegistrar, srv FinderServer) {
	// If the following call pancis, it indicates UnimplementedFinderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Finder_ServiceDesc, srv)
}

func _Finder_ReportDaily_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinderServer).ReportDaily(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Finder_ReportDaily_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinderServer).ReportDaily(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Finder_ReportWeek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinderServer).ReportWeek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Finder_ReportWeek_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinderServer).ReportWeek(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Finder_FindPossibleChance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinderServer).FindPossibleChance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Finder_FindPossibleChance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinderServer).FindPossibleChance(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// Finder_ServiceDesc is the grpc.ServiceDesc for Finder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Finder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "brain.Finder",
	HandlerType: (*FinderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportDaily",
			Handler:    _Finder_ReportDaily_Handler,
		},
		{
			MethodName: "ReportWeek",
			Handler:    _Finder_ReportWeek_Handler,
		},
		{
			MethodName: "FindPossibleChance",
			Handler:    _Finder_FindPossibleChance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finder.proto",
}
