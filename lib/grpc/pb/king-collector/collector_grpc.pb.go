// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: collector.proto

package pb

import (
	context "context"
	entity "github.com/eviltomorrow/king/lib/grpc/pb/entity"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Collector_CrawlMetadataAsync_FullMethodName = "/collector.Collector/CrawlMetadataAsync"
	Collector_CrawlMetadataSync_FullMethodName  = "/collector.Collector/CrawlMetadataSync"
	Collector_PullMetadata_FullMethodName       = "/collector.Collector/PullMetadata"
)

// CollectorClient is the client API for Collector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectorClient interface {
	// Crawl latest metadata from sina web(async)
	CrawlMetadataAsync(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Crawl latest metadata from sina web
	CrawlMetadataSync(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*CrawlMetadataResponse, error)
	// Fetch metadata from collector
	PullMetadata(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (grpc.ServerStreamingClient[entity.Metadata], error)
}

type collectorClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectorClient(cc grpc.ClientConnInterface) CollectorClient {
	return &collectorClient{cc}
}

func (c *collectorClient) CrawlMetadataAsync(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Collector_CrawlMetadataAsync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorClient) CrawlMetadataSync(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*CrawlMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CrawlMetadataResponse)
	err := c.cc.Invoke(ctx, Collector_CrawlMetadataSync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorClient) PullMetadata(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (grpc.ServerStreamingClient[entity.Metadata], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Collector_ServiceDesc.Streams[0], Collector_PullMetadata_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[wrapperspb.StringValue, entity.Metadata]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Collector_PullMetadataClient = grpc.ServerStreamingClient[entity.Metadata]

// CollectorServer is the server API for Collector service.
// All implementations must embed UnimplementedCollectorServer
// for forward compatibility.
type CollectorServer interface {
	// Crawl latest metadata from sina web(async)
	CrawlMetadataAsync(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// Crawl latest metadata from sina web
	CrawlMetadataSync(context.Context, *wrapperspb.StringValue) (*CrawlMetadataResponse, error)
	// Fetch metadata from collector
	PullMetadata(*wrapperspb.StringValue, grpc.ServerStreamingServer[entity.Metadata]) error
	mustEmbedUnimplementedCollectorServer()
}

// UnimplementedCollectorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCollectorServer struct{}

func (UnimplementedCollectorServer) CrawlMetadataAsync(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrawlMetadataAsync not implemented")
}
func (UnimplementedCollectorServer) CrawlMetadataSync(context.Context, *wrapperspb.StringValue) (*CrawlMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrawlMetadataSync not implemented")
}
func (UnimplementedCollectorServer) PullMetadata(*wrapperspb.StringValue, grpc.ServerStreamingServer[entity.Metadata]) error {
	return status.Errorf(codes.Unimplemented, "method PullMetadata not implemented")
}
func (UnimplementedCollectorServer) mustEmbedUnimplementedCollectorServer() {}
func (UnimplementedCollectorServer) testEmbeddedByValue()                   {}

// UnsafeCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectorServer will
// result in compilation errors.
type UnsafeCollectorServer interface {
	mustEmbedUnimplementedCollectorServer()
}

func RegisterCollectorServer(s grpc.ServiceRegistrar, srv CollectorServer) {
	// If the following call pancis, it indicates UnimplementedCollectorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Collector_ServiceDesc, srv)
}

func _Collector_CrawlMetadataAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServer).CrawlMetadataAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collector_CrawlMetadataAsync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServer).CrawlMetadataAsync(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collector_CrawlMetadataSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServer).CrawlMetadataSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collector_CrawlMetadataSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServer).CrawlMetadataSync(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collector_PullMetadata_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CollectorServer).PullMetadata(m, &grpc.GenericServerStream[wrapperspb.StringValue, entity.Metadata]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Collector_PullMetadataServer = grpc.ServerStreamingServer[entity.Metadata]

// Collector_ServiceDesc is the grpc.ServiceDesc for Collector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Collector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collector.Collector",
	HandlerType: (*CollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CrawlMetadataAsync",
			Handler:    _Collector_CrawlMetadataAsync_Handler,
		},
		{
			MethodName: "CrawlMetadataSync",
			Handler:    _Collector_CrawlMetadataSync_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullMetadata",
			Handler:       _Collector_PullMetadata_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "collector.proto",
}
