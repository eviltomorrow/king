// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: fund.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Fund_ReblanceByUserId_FullMethodName = "/account.Fund/ReblanceByUserId"
	Fund_InitAccount_FullMethodName      = "/account.Fund/InitAccount"
	Fund_ListByUserId_FullMethodName     = "/account.Fund/ListByUserId"
	Fund_ModifyAliasName_FullMethodName  = "/account.Fund/ModifyAliasName"
)

// FundClient is the client API for Fund service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FundClient interface {
	ReblanceByUserId(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InitAccount(ctx context.Context, in *InitAccountReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListByUserId(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*AccountListResp, error)
	ModifyAliasName(ctx context.Context, in *ModifyAliasNameReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type fundClient struct {
	cc grpc.ClientConnInterface
}

func NewFundClient(cc grpc.ClientConnInterface) FundClient {
	return &fundClient{cc}
}

func (c *fundClient) ReblanceByUserId(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Fund_ReblanceByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundClient) InitAccount(ctx context.Context, in *InitAccountReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Fund_InitAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundClient) ListByUserId(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*AccountListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountListResp)
	err := c.cc.Invoke(ctx, Fund_ListByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundClient) ModifyAliasName(ctx context.Context, in *ModifyAliasNameReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Fund_ModifyAliasName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FundServer is the server API for Fund service.
// All implementations must embed UnimplementedFundServer
// for forward compatibility.
type FundServer interface {
	ReblanceByUserId(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	InitAccount(context.Context, *InitAccountReq) (*emptypb.Empty, error)
	ListByUserId(context.Context, *wrapperspb.StringValue) (*AccountListResp, error)
	ModifyAliasName(context.Context, *ModifyAliasNameReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedFundServer()
}

// UnimplementedFundServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFundServer struct{}

func (UnimplementedFundServer) ReblanceByUserId(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReblanceByUserId not implemented")
}
func (UnimplementedFundServer) InitAccount(context.Context, *InitAccountReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitAccount not implemented")
}
func (UnimplementedFundServer) ListByUserId(context.Context, *wrapperspb.StringValue) (*AccountListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByUserId not implemented")
}
func (UnimplementedFundServer) ModifyAliasName(context.Context, *ModifyAliasNameReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyAliasName not implemented")
}
func (UnimplementedFundServer) mustEmbedUnimplementedFundServer() {}
func (UnimplementedFundServer) testEmbeddedByValue()              {}

// UnsafeFundServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FundServer will
// result in compilation errors.
type UnsafeFundServer interface {
	mustEmbedUnimplementedFundServer()
}

func RegisterFundServer(s grpc.ServiceRegistrar, srv FundServer) {
	// If the following call pancis, it indicates UnimplementedFundServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Fund_ServiceDesc, srv)
}

func _Fund_ReblanceByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundServer).ReblanceByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fund_ReblanceByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundServer).ReblanceByUserId(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fund_InitAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundServer).InitAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fund_InitAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundServer).InitAccount(ctx, req.(*InitAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fund_ListByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundServer).ListByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fund_ListByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundServer).ListByUserId(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fund_ModifyAliasName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyAliasNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundServer).ModifyAliasName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fund_ModifyAliasName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundServer).ModifyAliasName(ctx, req.(*ModifyAliasNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Fund_ServiceDesc is the grpc.ServiceDesc for Fund service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fund_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.Fund",
	HandlerType: (*FundServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReblanceByUserId",
			Handler:    _Fund_ReblanceByUserId_Handler,
		},
		{
			MethodName: "InitAccount",
			Handler:    _Fund_InitAccount_Handler,
		},
		{
			MethodName: "ListByUserId",
			Handler:    _Fund_ListByUserId_Handler,
		},
		{
			MethodName: "ModifyAliasName",
			Handler:    _Fund_ModifyAliasName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fund.proto",
}
