// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: transaction_record.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactionRecord_ListByUserId_FullMethodName = "/account.TransactionRecord/ListByUserId"
	TransactionRecord_ListByOpenID_FullMethodName = "/account.TransactionRecord/ListByOpenID"
)

// TransactionRecordClient is the client API for TransactionRecord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionRecordClient interface {
	ListByUserId(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*RecordResp, error)
	ListByOpenID(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*RecordResp, error)
}

type transactionRecordClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionRecordClient(cc grpc.ClientConnInterface) TransactionRecordClient {
	return &transactionRecordClient{cc}
}

func (c *transactionRecordClient) ListByUserId(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*RecordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordResp)
	err := c.cc.Invoke(ctx, TransactionRecord_ListByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionRecordClient) ListByOpenID(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*RecordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordResp)
	err := c.cc.Invoke(ctx, TransactionRecord_ListByOpenID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionRecordServer is the server API for TransactionRecord service.
// All implementations must embed UnimplementedTransactionRecordServer
// for forward compatibility.
type TransactionRecordServer interface {
	ListByUserId(context.Context, *wrapperspb.StringValue) (*RecordResp, error)
	ListByOpenID(context.Context, *wrapperspb.StringValue) (*RecordResp, error)
	mustEmbedUnimplementedTransactionRecordServer()
}

// UnimplementedTransactionRecordServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionRecordServer struct{}

func (UnimplementedTransactionRecordServer) ListByUserId(context.Context, *wrapperspb.StringValue) (*RecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByUserId not implemented")
}
func (UnimplementedTransactionRecordServer) ListByOpenID(context.Context, *wrapperspb.StringValue) (*RecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByOpenID not implemented")
}
func (UnimplementedTransactionRecordServer) mustEmbedUnimplementedTransactionRecordServer() {}
func (UnimplementedTransactionRecordServer) testEmbeddedByValue()                           {}

// UnsafeTransactionRecordServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionRecordServer will
// result in compilation errors.
type UnsafeTransactionRecordServer interface {
	mustEmbedUnimplementedTransactionRecordServer()
}

func RegisterTransactionRecordServer(s grpc.ServiceRegistrar, srv TransactionRecordServer) {
	// If the following call pancis, it indicates UnimplementedTransactionRecordServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionRecord_ServiceDesc, srv)
}

func _TransactionRecord_ListByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionRecordServer).ListByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionRecord_ListByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionRecordServer).ListByUserId(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionRecord_ListByOpenID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionRecordServer).ListByOpenID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionRecord_ListByOpenID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionRecordServer).ListByOpenID(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionRecord_ServiceDesc is the grpc.ServiceDesc for TransactionRecord service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionRecord_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.TransactionRecord",
	HandlerType: (*TransactionRecordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListByUserId",
			Handler:    _TransactionRecord_ListByUserId_Handler,
		},
		{
			MethodName: "ListByOpenID",
			Handler:    _TransactionRecord_ListByOpenID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction_record.proto",
}
