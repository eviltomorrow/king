// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: assets.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Assets_ListByUserId_FullMethodName = "/account.Assets/ListByUserId"
)

// AssetsClient is the client API for Assets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetsClient interface {
	ListByUserId(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*ItemListResp, error)
}

type assetsClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetsClient(cc grpc.ClientConnInterface) AssetsClient {
	return &assetsClient{cc}
}

func (c *assetsClient) ListByUserId(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*ItemListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemListResp)
	err := c.cc.Invoke(ctx, Assets_ListByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetsServer is the server API for Assets service.
// All implementations must embed UnimplementedAssetsServer
// for forward compatibility
type AssetsServer interface {
	ListByUserId(context.Context, *wrapperspb.StringValue) (*ItemListResp, error)
	mustEmbedUnimplementedAssetsServer()
}

// UnimplementedAssetsServer must be embedded to have forward compatible implementations.
type UnimplementedAssetsServer struct {
}

func (UnimplementedAssetsServer) ListByUserId(context.Context, *wrapperspb.StringValue) (*ItemListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByUserId not implemented")
}
func (UnimplementedAssetsServer) mustEmbedUnimplementedAssetsServer() {}

// UnsafeAssetsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetsServer will
// result in compilation errors.
type UnsafeAssetsServer interface {
	mustEmbedUnimplementedAssetsServer()
}

func RegisterAssetsServer(s grpc.ServiceRegistrar, srv AssetsServer) {
	s.RegisterService(&Assets_ServiceDesc, srv)
}

func _Assets_ListByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServer).ListByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assets_ListByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServer).ListByUserId(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// Assets_ServiceDesc is the grpc.ServiceDesc for Assets service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Assets_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.Assets",
	HandlerType: (*AssetsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListByUserId",
			Handler:    _Assets_ListByUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "assets.proto",
}
